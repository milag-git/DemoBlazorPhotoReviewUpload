@page "/uploadphotos"
@using DemoBlazorPhotoReviewUpload.Services.Interfaces


@inject IUploadPhotoData _UploadProjectPhotosData

<style>
    .file-input-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        /*         background-color: #594AE2;
     */
        background-color: limegreen;
        color: white;
        cursor: pointer;
        position: relative;
        width: 140px;
        height: 36px;
        border-color: transparent;
        margin-top: 8px;
        padding-top: 8px;
        padding-left: 10px;
        border-radius: 4px;
    }

        .file-input-zone input[type=file] {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

</style>

<MudAlert NoIcon Severity="Severity.Warning">@message</MudAlert>

<br />
<br />

<MudContainer MaxWidth="MaxWidth.Small">

    <MudGrid Spacing=6 Justify="Justify.Center">
        <MudItem>

            @for (int i = 0; i <= currentFileSelection; i++)
            {
                @if (i != currentFileSelection)
                {
                    HideDivDisplay = "none";
                }
                else
                {
                    HideDivDisplay = "inline-block";
                }

                <div class="file-input-zone" style="display:@HideDivDisplay;">
                    <InputFile accept=".png,.jpg,.jpeg,.bmp" multiple OnChange="LoadImage" type="file" />
                    SELECT PHOTOS
                </div>


            }



        </MudItem>
        <MudSpacer />
        <MudItem Class="">

            <MudButton class="mt-2" OnClick="UploadImages" Variant="Variant.Filled" Color="Color.Success">Upload</MudButton>

        </MudItem>
    </MudGrid>

</MudContainer>

<MudGrid Spacing=2 Justify="Justify.Center">
    @foreach (var Imagelistitem in ImageList)
    {
        <MudItem Style="display:flex;">


            <MudCard>
                <img src="@Imagelistitem.Value" />
                <br />
                <MudCardContent Style="min-height: 10px">

                </MudCardContent>
                <MudCardActions Style="position:absolute;bottom:0">

                </MudCardActions>

            </MudCard>
            <br />

            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="()=>RemoveImage(Imagelistitem.Key)" aria-label="delete"></MudIconButton>
        </MudItem>
    }
</MudGrid>

@code
{
    private string HideDivDisplay { get; set; } = "inline-block";
    private int currentFileSelection = 0;
    private string message = "Photos";
    private Dictionary<string, string> ImageList = new Dictionary<string, string>();
    private int maxAllowedFiles = 10;
    private Dictionary<string, IBrowserFile> ImageDict = new Dictionary<string, IBrowserFile>();

    private void loadmessage()
    {
        message = "Photos";
    }


    private async Task LoadImage(InputFileChangeEventArgs e)
    {

        message = "Photos";
        var files = e.GetMultipleFiles(maxAllowedFiles);

        var format = "image/png";
        foreach (var imageFile in files)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            string guidvar = Guid.NewGuid().ToString();
            var ImageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageList.Add(guidvar, ImageDataUrl);
            ImageDict.Add(guidvar, imageFile);
            this.StateHasChanged();
        }
         currentFileSelection++;

    }
    private void RemoveImage(string key)
    {
        message = "Photos";
        ImageList.Remove(key);
        ImageDict.Remove(key);
        this.StateHasChanged();

    }
    private void UploadImages()
    {
        message = "Photos";

        if (ImageList.Count() == 0)
        {
            message = "No Photos selected";
            this.StateHasChanged();

        }

        else
        {
            List<IBrowserFile> content = new List<IBrowserFile>();
            foreach (var file in ImageDict)
            {
                content.Add(file.Value);
            }

            _UploadProjectPhotosData.UploadFile(content);
            ImageList.Clear();
            ImageDict.Clear();
            message = "Images Uploaded";
            this.StateHasChanged();
        }
    }
}




